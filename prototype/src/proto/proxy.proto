// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package proxy_proto;

// The greeting service definition.
service proxyService {
  // Sends a greeting
  rpc checkalive (CheckaliveCMD) returns (RequestResult);
  rpc EncodeAndSetObject(ObjectAndPlacement) returns (SetReply);
  rpc decodeAndGetObject(ObjectAndPlacement) returns (GetReply);
  rpc mainRepair(mainRepairPlan) returns (mainRepairReply);
  rpc helpRepair(helpRepairPlan) returns (helpRepairReply);
}

message mainRepairPlan {
  bool one_shard_fail = 1;
  bool multi_az = 2;
  int32 k = 3;
  int32 real_l = 4;
  int32 g = 5;
  int32 b = 6;
  int32 self_az_id = 7;
  bool if_partial_decoding = 8;
  int32 stripe_id = 9;
  int32 shard_size = 10;
  int32 encode_type = 11;
  repeated int32 help_azs_id = 12;
  repeated bool merge = 13;
  repeated string new_location_ip = 14;
  repeated int32 new_location_port = 15;
  repeated int32 new_location_shard_idx = 16;
  repeated int32 all_failed_shards_idx = 17;
  repeated string inner_az_help_shards_ip = 18;
  repeated int32 inner_az_help_shards_port = 19;
  repeated int32 inner_az_help_shards_idx = 20;
  repeated int32 chosen_shards = 21;
}

message helpRepairPlan {
  bool one_shard_fail = 1;
  bool multi_az = 2;
  int32 k = 3;
  int32 real_l = 4;
  int32 g = 5;
  int32 b = 6;
  int32 self_az_id = 7;
  bool if_partial_decoding = 8;
  int32 stripe_id = 9;
  string main_proxy_ip = 10;
  int32 main_proxy_port = 11;
  int32 shard_size = 12;
  int32 encode_type = 13;
  int32 failed_shard_idx = 14;
  bool merge = 15;
  repeated int32 all_failed_shards_idx = 16;
  repeated string inner_az_help_shards_ip = 17;
  repeated int32 inner_az_help_shards_port = 18;
  repeated int32 inner_az_help_shards_idx = 19;
  repeated int32 chosen_shards = 20;
}

message mainRepairReply {
  double time_cost = 1;
}

message helpRepairReply {
  string result = 1;
}

// The request message containing the user's name.
message CheckaliveCMD {
  string name = 1;
}

// The response message containing the greetings
message RequestResult {
  bool message = 1;
}

message ObjectAndPlacement{
  bool bigobject = 1;
  string key = 2;
  int32 valuesizebyte = 3;
  int32 k = 4;
  int32 m = 5;
  int32 real_l = 6;
  repeated int32 stripe_ids = 7;
  repeated string datanodeip = 8;
  repeated int32 datanodeport = 9;
  int32 shard_size = 10;
  int32 tail_shard_size = 11;
  string clientip = 12;
  int32 clientport = 13;
  int32 encode_type = 14;
  int32 b = 15;
  int32 writebufferindex = 16;
}
message SetReply {
  bool ifcommit = 1;
}
message GetReply {
  bool getsuccess = 1;
}

